h1. Strategic Evolution of Authentication and Authorization Services

*Date:* May 19, 2025
*Version:* 1.0
*Author:* Gemini AI Assistant
*Status:* Proposed Strategy

---

h2. Table of Contents
(To use Confluence's automatic ToC, you can insert the {toc} macro here)

# Overview
# Existing System of Auth Flow
## Current Operation
## Architecture Diagram
# Issues with the Existing System
# Architecture Options Discussed
## Option 1: Continuing with the Current Approach
## Option 2: SDK Clients Utilize PingFederate
## Option 3: Unified Authentication and Authorization with Keycloak
## Option 4: Unified Authentication with Keycloak and Dedicated Authorization with Casbin (Recommended)
# Pros and Cons Analysis & Rationale for Recommended Option
## Analysis of Options
## Rationale for Recommending Option 4.4
# Conclusion
## Summary of Recommendation
## Anticipated Benefits
## High-Level Path Forward

---

h2. 1. Overview

This document outlines a strategic evolution for the existing authentication (AuthN) and authorization (AuthZ) architecture. The current landscape, characterized by disparate identity providers and a rudimentary authorization model, presents operational complexities and limitations in security and scalability.

The primary objective of this proposal is to transition towards a unified, robust, and cloud-agnostic framework. This involves recommending a single, industry-standard Identity Provider (IdP) capable of serving all client types (UI, SDK, CLI) and integrating a dedicated authorization engine to enable fine-grained access control.

The recommendations herein aim to:

* *Address existing complexities:* By streamlining the authentication infrastructure.
* *Enhance security:* By implementing granular access controls and adhering to modern security standards.
* *Ensure scalability:* By adopting a flexible architecture that can accommodate future growth in users, services, and applications.
* *Promote cloud agnosticism:* Ensuring components can be deployed across various environments, aligning with the backend services currently on Google Kubernetes Engine (GKE) but designed for broader applicability.

This document will provide a comparative analysis of suitable solutions, detail the proposed integrated system architecture, and offer a clear rationale for the recommended path forward, focusing on Keycloak for authentication and Casbin for authorization.

---

h2. 2. Existing System of Auth Flow

h3. 2.1. Current Operation

The current authentication and authorization mechanisms are bifurcated and employ a basic access control model.

*Authentication:*
* *UI Clients:* Users interacting through web UIs authenticate via PingFederate, which issues an ID token.
* *SDK Clients (CLI/Script):* Programmatic clients, such as Command Line Interfaces or scripts, authenticate using the Google SDK, also resulting in an ID token.
This dual-IdP setup stems from the perception that the existing PingFederate integration necessitates a UI, rendering it unsuitable for non-interactive SDK flows.

*Token Exchange and Session Management:*
Regardless of the IdP, the client sends its ID token to a `/user` route on the Python FastAPI backend. The backend validates this token and, upon success, generates a custom short-lived (1-hour) "secret token" (JWT). This custom token is then used for all subsequent API calls.

*Authorization:*
The current authorization model is "pretty basic." Possession of the backend-generated "secret token" grants unrestricted access to all backend API calls (e.g., `create project`, `document search`, `model search`). This coarse-grained approach lacks the ability to enforce differential access rights.

h3. 2.2. Architecture Diagram

The following diagram illustrates the current authentication and authorization flow:

{info}If the diagram below does not render, ensure the "Mermaid Diagrams for Confluence" macro (or similar) is installed and enabled. Alternatively, you can paste the code into an online Mermaid editor to view it.{info}
{code:mermaid}
graph TD
    subgraph Client Layer
        UI[Web UI Client] -->|1 Authenticate| PING
        SDK[CLI/SDK Client] -->|1Authenticate| GOOG
    end

    subgraph Identity Providers
        PING[[PingFederate]]
        GOOG[[Google SDK]]
    end

    subgraph Backend Services
        BE[FastAPI Backend]
        KV[Token Store]
    end

    subgraph Infrastructure
        GKE[Google Kubernetes Engine]
    end

    UI -->|2 Present ID Token| BE
    SDK -->|2 Present ID Token| BE
    BE -->|3a Validate| PING
    BE -->|3b Validate| GOOG
    BE -->|4 Store| KV
    BE -->|5 Issue| SECRET[Secret Token]
    BE -.-> GKE

    classDef component fill:#f9f9f9,stroke:#666,stroke-width:2px;
    classDef cloud fill:#e6f3ff,stroke:#0066cc;
    classDef idp fill:#ffe6e6,stroke:#cc0000;
    class UI,SDK,BE,KV,GKE component;
    class PING,GOOG idp;
    class GKE cloud;
{code}

---

h2. 3. Issues with the Existing System

The current dual-IdP system and basic authorization model present several significant challenges that impede scalability, security, and operational efficiency:

# *Operational Complexity:* Managing and maintaining two distinct authentication systems (PingFederate for UI, Google SDK for SDKs) increases administrative overhead, configuration drift potential, and introduces multiple points of failure.
# *Inconsistent User Experience:* Users undergo different authentication processes depending on the client type (UI vs. SDK), potentially leading to confusion, varying error handling, and a fragmented overall experience.
# *Limited Granularity in Authorization:* The "all-or-nothing" access model, where a single "secret token" grants universal privileges, is a major security and operational constraint. It cannot support nuanced permission schemes like role-based access control (RBAC) or attribute-based access control (ABAC), preventing differential access rights based on user roles or specific attributes.
# *Scalability Concerns:* As the number of users, roles, resources, and applications grows, the simplistic authorization model will become increasingly inadequate, unmanageable, and a bottleneck for introducing new features requiring varied access levels.
# *Security Considerations:*
** Relying on a single bearer token for all actions post-authentication increases the potential impact if that token is compromised.
** The introduction of an intermediate custom "secret token" adds another component and token type to manage and secure, and its necessity should be re-evaluated against standard OAuth 2.0 access tokens.
# *Cloud Agnosticism Alignment:* While backend services run on GKE, the strategic goal is cloud agnosticism for AuthN/AuthZ. The reliance on Google SDK for a primary authentication path introduces a degree of vendor lock-in, potentially complicating future deployments in other cloud environments or on-premise.

---

h2. 4. Architecture Options Discussed

Several architectural options were considered to address the challenges of the current system. Each option presents different trade-offs in terms of complexity, cost, flexibility, and alignment with strategic goals.

h3. 4.1. Option 1: Continuing with the Current Approach

* *Description:* This option involves maintaining the status quo: PingFederate for UI-based authentication and Google SDK for SDK-based interactions, along with the custom "secret token" and basic authorization model.
* *Issues/Implications:*
** *Persistent Challenges:* All current limitations (operational complexity, inconsistent UX, limited authorization granularity, scalability issues, security concerns) would remain unaddressed and likely exacerbate over time.
** *Hindrance to Evolution:* This approach would continue to hinder the development of features requiring more sophisticated access control.
** *Cloud Agnosticism Not Achieved:* The dependency on Google SDK for programmatic authentication remains a barrier to true cloud-agnostic deployment of authentication services. PingFederate's deployment flexibility would also need to be continually assessed against cloud-agnostic goals.
** *Increased Technical Debt:* Delaying modernization will accumulate further technical debt, making an eventual overhaul more complex and costly.

h3. 4.2. Option 2: SDK Clients Utilize PingFederate

* *Description:* This option explores consolidating all authentication flows onto the existing PingFederate instance. It would require investigating whether PingFederate can support non-UI based authentication flows (e.g., OAuth 2.0 Device Authorization Grant or Client Credentials Grant) suitable for SDK and CLI clients, thereby eliminating the need for the Google SDK for authentication.
* *Issues/Implications:*
** *Feasibility:* Success depends on PingFederate's capabilities, particularly for non-interactive flows. The original rationale for the dual-IdP setup was PingFederate's perceived UI requirement for authentication.
** *Functionality Gap:* Even if technically feasible, PingFederate might not offer the same ease of use or feature set for device flows or M2M authentication as solutions designed with these use cases as primary.
** *Cost & Licensing:* Relying further on PingFederate might have licensing cost implications, especially if additional modules or user counts are involved.
** *Authorization Limitations:* This option, by itself, does not address the need for fine-grained authorization unless PingFederate's own authorization capabilities are deemed sufficient and flexible enough, which often is not the case compared to dedicated engines for complex policies.
** *Cloud Agnosticism:* PingFederate's suitability for cloud-agnostic deployment (ease of containerization, Kubernetes support, managed service availability across clouds vs. self-hosting complexities) remains a consideration.

h3. 4.3. Option 3: Unified Authentication and Authorization with Keycloak

* *Description:* This option proposes replacing both PingFederate and Google SDK with Keycloak, an open-source Identity and Access Management (IAM) solution. Keycloak would serve as the single, unified IdP for all client types (UI, SDK, CLI) by leveraging appropriate OAuth 2.0 grant types. Keycloak itself offers built-in capabilities for defining roles, permissions, and policies for authorization.
* *Industries Using Keycloak:* Keycloak is a mature and widely adopted solution across diverse industries, demonstrating its robustness and versatility. Examples include:
** *Technology and Software:* For customer IAM (CIAM) and internal workforce IAM.
** *Finance and Insurance:* Securing customer portals and internal applications.
** *Healthcare:* For patient and staff access to sensitive data, supporting compliance.
** *Government and Public Sector:* For citizen-facing services and internal systems.
** *Education:* Managing student and faculty identities.
** Companies like Bosch, and various governmental and educational institutions leverage Keycloak. Its development is backed by Red Hat.
* *Issues/Implications:*
** *Unified AuthN:* Effectively solves the dual-IdP problem and provides standardized authentication.
** *Built-in AuthZ:* Keycloak's authorization services are powerful but can become complex to manage for very intricate, dynamic, or attribute-rich authorization scenarios. The policy language and model are tied to Keycloak's ecosystem.
** *Separation of Concerns:* Combining AuthN and very complex AuthZ logic within the IdP might make the IdP a more monolithic component, potentially impacting agility if AuthZ policies change much more frequently or have different lifecycle management needs than core identity data.

h3. 4.4. Option 4: Unified Authentication with Keycloak and Dedicated Authorization with Casbin (Recommended)

* *Description:* This option recommends Keycloak as the single, unified IdP for all authentication needs, similar to Option 4.3. However, for authorization, it proposes integrating Casbin, an open-source authorization library. Casbin would be embedded within the backend FastAPI services (or run as a sidecar/service) to enforce fine-grained access control policies (RBAC, ABAC, etc.) based on policies stored externally (e.g., in a PostgreSQL database). Keycloak-issued access tokens would carry user identity and potentially role/group information, which Casbin would use as input for its policy decisions.
* *Issues/Implications:*
** *Optimal Separation:* Provides a clear separation between authentication (handled by Keycloak) and authorization (handled by Casbin). This aligns with microservices best practices where authorization logic can be decentralized or centrally managed but enforced at the service level.
** *Flexibility in Authorization:* Casbin offers high flexibility in defining custom access control models (ACL, RBAC, ABAC, ReBAC, etc.) and policies, decoupled from the IdP.
** *Integration Effort:* Requires robust integration: Keycloak issues tokens, backend services validate them, and then Casbin evaluates access based on token claims and its policies.
** *Component Management:* Involves managing two core components (Keycloak and Casbin with its policy store) instead of one, but this is often a worthwhile trade-off for the gained flexibility and clarity.

---

h2. 5. Pros and Cons Analysis & Rationale for Recommended Option

h3. 5.1. Analysis of Options

||Feature/Aspect||Option 4.1 (Current)||Option 4.2 (PingFederate for SDK)||Option 4.3 (Keycloak for AuthN & AuthZ)||Option 4.4 (Keycloak + Casbin)||
|Unified Authentication|No (Dual IdP)|Potentially (If Ping supports flows)|Yes|Yes|
|Fine-Grained AuthZ|No (Basic, all-or-nothing)|Not directly addressed|Yes (Keycloak's engine)|Yes (Dedicated Casbin engine)|
|Operational Complexity|High|Moderate (if unified) to High|Moderate|Moderate (two components, but clear roles)|
|Cloud Agnosticism|Low (Google SDK)|Moderate (Depends on PingFederate)|High (Open-source, deploy anywhere)|High (Open-source, deploy anywhere)|
|Security (Granularity)|Low|Low (if AuthZ not improved)|Moderate to High|High|
|Scalability (AuthZ)|Low|Low (if AuthZ not improved)|Moderate|High|
|Cost (Licensing)|Existing Ping + Google (often free)|Potential Ping increase|Low (Open Source)|Low (Open Source)|
|Flexibility (AuthZ)|Very Low|Very Low|Moderate (Keycloak-specific)|Very High (Casbin models)|
|Community Support|Ping (Commercial), Google SDK (Good)|Ping (Commercial)|Excellent (Keycloak)|Good (Casbin), Excellent (Keycloak)|
|Separation of Concerns|Poor|Poor|Moderate|Excellent|

h3. 5.2. Rationale for Recommending Option 4.4 (Keycloak for AuthN, Casbin for AuthZ)

Option 4.4 is recommended as the strategic path forward due to its comprehensive approach to addressing the current system's deficiencies and aligning with future requirements.

*Key Advantages of Option 4.4:*

# *Solves Core Authentication Problems:*
** *Unified IdP (Keycloak):* Eliminates the complexity and inconsistency of the dual-IdP setup. Keycloak's support for diverse OAuth 2.0 grant types (Authorization Code + PKCE for UI, Device Authorization Grant for CLI/SDK, Client Credentials for M2M) ensures all client types are catered for by a single, standards-based provider.
** *Cloud-Agnostic & Open Source:* Keycloak is open-source, mitigating vendor lock-in and reducing licensing costs. Its ability to be deployed on-premise, in Docker containers, or on Kubernetes (including GKE) aligns perfectly with the cloud-agnostic requirement.
** *Robust Security & Features:* Keycloak provides essential security features like MFA, SSO, user federation, and strong community backing.

# *Implements True Fine-Grained Authorization (Casbin):*
** *Dedicated Authorization Engine:* Casbin allows for the externalization and centralization of authorization logic, decoupling it from application code. This leads to cleaner, more maintainable services.
** *Flexible Policy Models:* Supports various models like RBAC and ABAC, enabling the definition of nuanced access rules that the current "secret token grants all" system cannot. Policies can be managed and updated dynamically.
** *Scalable Access Control:* As the application ecosystem grows, Casbin's model allows for easier management and scaling of complex permission schemes.

# *Achieves Clear Separation of Concerns:*
** Authentication (who the user is) is distinctly handled by Keycloak.
** Authorization (what the user can do) is distinctly handled by Casbin.
This separation enhances modularity, testability, and independent evolution of these critical components.

# *Directly Addresses All Major Pain Points:*
** *Reduces Complexity:* Single IdP.
** *Consistent User Experience:* Unified login flows.
** *Enables Granular Control:* Fine-grained policies with Casbin.
** *Improves Scalability:* Decoupled and specialized components.
** *Bolsters Security:* Standard protocols, MFA, detailed access checks.
** *Eliminates Custom Token Issues:* Recommends leveraging standard IdP-issued access tokens, rich with claims, directly for API calls, reducing custom logic.

While this approach introduces Casbin as an additional component to manage alongside Keycloak, the benefits of highly flexible, dedicated fine-grained authorization and clear separation of concerns significantly outweigh the operational overhead of managing one more well-defined service, especially given its open-source nature and robust database adapter/watcher mechanisms for GKE environments. It provides the most comprehensive and future-proof solution.

---

h2. 6. Conclusion

h3. 6.1. Summary of Recommendation

After a thorough analysis of the current authentication and authorization architecture and a review of viable modernization options, this document strongly recommends a strategic shift towards a unified and more sophisticated access control framework. The core recommendations are:

# *Adopt Keycloak as the Unified Identity Provider (IdP):* Replace the existing dual PingFederate and Google SDK authentication mechanisms with a single, self-hosted Keycloak instance. Keycloak will manage all user authentication using standard OAuth 2.0 and OpenID Connect protocols, supporting UI, SDK/CLI, and M2M client types through appropriate grant flows.
# *Integrate Casbin for Fine-Grained Authorization:* Implement Casbin as the dedicated authorization engine within the backend FastAPI services. Casbin will enforce detailed access control policies (e.g., RBAC, ABAC) based on rules stored in a central policy database (e.g., PostgreSQL) and synchronized across service instances.
# *Transition to Direct Use of IdP Access Tokens:* Phase out the custom "secret token" in favor of using Keycloak-issued Access Tokens directly for authorizing API calls. These tokens will carry the necessary claims for Casbin to make authorization decisions.

h3. 6.2. Anticipated Benefits

The adoption of this proposed architecture—Keycloak for unified authentication and Casbin for fine-grained authorization—is projected to yield significant advantages:

* *Simplified Authentication Landscape:* Reduces operational complexity, maintenance overhead, and potential points of failure by consolidating to a single IdP.
* *Enhanced Security:* Moves beyond the current permissive model by implementing robust, fine-grained access control. Leverages the proven security features of Keycloak and OAuth 2.0/OIDC standards.
* *Improved Scalability and Maintainability:* Cloud-agnostic components and decoupled authorization logic allow the system to scale more effectively. Services become easier to maintain and update independently.
* *Standards-Compliance and Future-Proofing:* Adherence to open standards ensures interoperability, prevents vendor lock-in, and prepares the system for future technological advancements and evolving business requirements.
* *Consistent User Experience:* Provides a unified and streamlined authentication experience for all users, irrespective of how they interact with the services.

h3. 6.3. High-Level Path Forward

Successfully transitioning to this new architecture will require a structured and phased implementation. While detailed implementation planning is beyond the scope of this initial strategy document, the high-level path would involve:

# *Team Formation and Detailed Planning:* Establish a dedicated team to lead this initiative, developing a comprehensive project plan with clear timelines, resource allocation, and milestones.
# *Phased Rollout:*
** *Phase 1: Unified Authentication with Keycloak:* Deploy Keycloak, migrate UI and SDK clients, and adapt backend services to validate Keycloak tokens.
** *Phase 2: Casbin Integration for Authorization:* Define policies, set up policy storage, integrate Casbin middleware into pilot services, and then gradually roll out to all services.
** *Phase 3: Token Flow Optimization:* Transition to using Keycloak-issued access tokens directly, decommissioning the custom "secret token."
# *Proof of Concept (PoC):* Conduct PoCs for Keycloak with various client flows and for Casbin integration with a representative backend service to validate the approach and identify potential challenges early.
# *Infrastructure Setup and Configuration:* Prepare the GKE environment (or other target environments) for Keycloak deployment and the Casbin policy database, including considerations for high availability, scaling, and monitoring.
# *Development, Rigorous Testing, and Documentation:* Allocate resources for application migration, SDK updates, Casbin policy implementation, and comprehensive testing at each phase. Update all relevant technical documentation.

This strategic evolution towards Keycloak and Casbin represents a significant step in modernizing the platform's access control capabilities, laying a resilient and secure foundation for future growth and innovation.








Explanation for Team 2a Diagram (GenAI Access):

This diagram shows a multi-step process:

This workflow involves three main phases:

GenAI User Request Flow: The end-user requests access to a specific GenAI model.
AI Gov Approval Flow: The AI Governance team reviews and approves/denies the request.
GenAI User Usage Flow (Post-Approval): The end-user utilizes the GenAI model after access is granted.
Phase 1: GenAI User Request Flow
This phase describes how a GenAI User initiates a request for access to a particular GenAI model.

GENAI_USER[GenAI User via UI]: This represents the end-user interacting with your system, likely through a web user interface.
KEYCLOAK_T2A[Keycloak IdP]: The central Identity Provider.
APIGW_T2A[API Gateway/FastAPI Backend]: Your backend application that handles the logic.
CASBIN_T2A[Casbin Engine (in Backend)]: The authorization engine within your backend.
POLICY_STORE_T2A[(Casbin Policy Store)]: Where Casbin's authorization rules are stored.
ACCESS_REQUEST_DB[(Access Request Records)]: A database or table to log and track access requests.
Steps:

1a. Auth (gets GenAIUser role):

The GenAI User (from GENAI_USER) initiates an authentication process with KEYCLOAK_T2A. This could be by clicking a "Login" button, which redirects them to Keycloak's login page.
The user provides their credentials to Keycloak.
Upon successful authentication, Keycloak determines the user's roles. For this flow, we assume the user is assigned or has a role like GenAIUser.
KEYCLOAK_T2A then issues a JSON Web Token (JWT) back to the GENAI_USER's client (e.g., browser). This JWT contains claims about the user, including their unique identifier (sub claim) and their roles (e.g., roles: ["GenAIUser"]).
2a. Request Access to 'gemini_pro' (POST /genai/requests):

The authenticated GenAI User, now possessing the JWT, navigates to a part of the UI where they can request access to a specific GenAI model (e.g., 'gemini_pro').
The UI makes an API call – typically a POST request – to an endpoint on your APIGW_T2A (e.g., /genai/requests). This request includes the JWT in the Authorization header and details of the request (e.g., which model they want access to, possibly a justification).
3a. Validate JWT, Extract Claims:

Your APIGW_T2A receives the API request.
The first step is to validate the incoming JWT. This involves checking its signature against Keycloak's public keys, verifying the issuer, audience, and ensuring it hasn't expired.
If the JWT is valid, the backend extracts necessary claims from it, such as the user's ID (user_id) and their roles (e.g., GenAIUser). These claims are then available for the CASBIN_T2A engine.
4a. Enforce(user_id, 'genai_models', 'request_access'):

The backend now needs to determine if this specific user is authorized to request access to GenAI models in general.
It calls the CASBIN_T2A engine's enforce method. The parameters might look like: enforce(subject, object, action).
subject: The user_id extracted from the JWT.
object: A representation of the resource being acted upon, e.g., 'genai_models' (as a category) or potentially the specific model 'gemini_pro'.
action: The attempted action, which is 'request_access'.
CASBIN_T2A loads the relevant policies from the POLICY_STORE_T2A and evaluates if there's a rule allowing this subject to perform this action on this object. For example, a policy might be p, role:GenAIUser, genai_models, request_access, allow.
5a. If Allow, Create Request:

Casbin's enforce method returns true (Allow) or false (Deny).
If Casbin allows the action (true), the APIGW_T2A proceeds with the business logic.
This involves creating a new record in the ACCESS_REQUEST_DB. This record would store details like who requested access, to which model, when the request was made, and its current status (e.g., "pending").
The API then returns a success response to the GENAI_USER. If denied, an error response (e.g., 403 Forbidden) is returned.
Phase 2: AI Gov Approval Flow
This phase describes how a member of the AI Gov Team reviews and processes the pending access request.

AI_GOV[AI Gov Team Member via Admin UI]: Represents a user from the AI Governance team, likely using a separate admin interface.
Steps:

1b. Auth (gets AIGovTeamMember role):

Similar to the GenAI User, the AI Gov Team Member (from AI_GOV) authenticates with KEYCLOAK_T2A, likely through an admin portal.
Upon successful authentication, Keycloak issues a JWT to this user, containing their identity and role, e.g., AIGovTeamMember.
2b. Approve Request for 'user_id' & 'gemini_pro' (POST /genai/requests/{id}/approve):

The authenticated AI Gov Team Member views pending access requests in their admin UI (requests fetched from ACCESS_REQUEST_DB).
To approve a specific request (e.g., for user_id to access gemini_pro), they trigger an action in the UI.
The UI makes an API call to the APIGW_T2A, perhaps a POST to an endpoint like /genai/requests/{request_id}/approve. This request includes the AI Gov member's JWT.
3b. Validate JWT, Extract Claims:

The APIGW_T2A receives this approval request.
It validates the AI Gov member's JWT and extracts their aigov_user_id and roles (e.g., AIGovTeamMember).
4b. Enforce(aigov_user_id, 'genai_access_requests', 'approve'):

The backend checks if this AI Gov member is authorized to approve access requests.
It calls CASBIN_T2A: enforce(aigov_user_id, 'genai_access_requests', 'approve').
CASBIN_T2A checks policies in POLICY_STORE_T2A. A policy like p, role:AIGovTeamMember, genai_access_requests, approve, allow would permit this.
5b. If Allow, Update Policy Store: Add: p, user_id, genai_model:gemini_pro, use_model:

If Casbin allows the approval (true):
Crucially, the APIGW_T2A now interacts with the POLICY_STORE_T2A (via Casbin's management APIs or directly if using an adapter that allows it) to add a new authorization rule.
This new rule explicitly grants the original requesting user (user_id) permission to use the specific model. The policy would look something like: p, <original_user_id>, genai_model:gemini_pro, use_model, allow.
This dynamically updates the authorization rules, so Casbin will know this user is now allowed to use gemini_pro.
6b. Update Request Status:

The APIGW_T2A updates the status of the original request in the ACCESS_REQUEST_DB to "approved".
A success response is sent back to the AI_GOV member's UI. The original GENAI_USER might also be notified.
Phase 3: GenAI User Usage Flow (Post-Approval)
This phase describes how the GenAI User, having been granted access, now uses the GenAI model.

GENAI_MODELS[External GenAI Models (OpenAI, Gemini)]: Represents the actual third-party GenAI services.
Steps:

1c. Use 'gemini_pro' (POST /genai/invoke/gemini_pro):

The GENAI_USER (who previously authenticated and whose request was approved) now attempts to use the gemini_pro model through your system's UI.
The UI makes an API call to your APIGW_T2A, for example, POST /genai/invoke/gemini_pro, sending a payload with the prompt for the model. The user's original JWT (still valid or refreshed) is included.
2c. Validate JWT, Extract Claims:

The APIGW_T2A receives the request.
It validates the GENAI_USER's JWT and extracts their user_id.
3c. Enforce(user_id, 'genai_model:gemini_pro', 'use_model'):

The backend now checks if this specific user is authorized to use this specific model.
It calls CASBIN_T2A: enforce(user_id, 'genai_model:gemini_pro', 'use_model').
CASBIN_T2A checks its POLICY_STORE_T2A. Because of step 5b, the policy p, <user_id>, genai_model:gemini_pro, use_model, allow now exists.
4c. If Allow, Proxy/Call:

Casbin returns true because the specific permission was granted during the approval step.
The APIGW_T2A now proceeds to interact with the actual external GENAI_MODELS service (e.g., makes an API call to the Gemini API endpoint with the user's prompt).
The response from the external GenAI model is then relayed back to the GENAI_USER via your API. If Casbin had denied access, an error (e.g., 403 Forbidden) would be returned.





Explanation for Team 2b Diagram (Document Search):

A Document User authenticates with Keycloak.
Keycloak issues a JWT (e.g., with DocumentUser role).
The client makes an API request to search documents, including the JWT.
The backend validates the JWT.
Claims are passed to Casbin.
Casbin loads policies.
Casbin enforces the policy (e.g., "Can DocumentUser search_documents in document_collections?"). This could also be more granular, like enforce(user_Y, 'collection_contracts', 'search_documents') if using ABAC.
If allowed, the backend queries the Vector DB.
Results are returned to the client.

Explanation for Team 1 Diagram:

An ML Developer (Client) authenticates with Keycloak.
Keycloak issues a JWT containing user identity and roles (e.g., MLDeveloper).
The client makes an API request (e.g., to create a model) to the backend, including the JWT.
The backend validates the JWT with Keycloak.
Relevant claims are extracted and passed to the Casbin engine.
Casbin loads relevant policies from its store.
Casbin enforces the policy (e.g., "Can MLDeveloper create 'models'?").
If allowed, the backend proceeds to interact with the appropriate MLOps resource (Model Registry or Pipeline Service).